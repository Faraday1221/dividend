## References
- [GitHub Collaboration](https://help.github.com/categories/collaborating/)
- [Useful Commands](http://zackperdue.com/tutorials/super-useful-need-to-know-git-commands)
- [GitHub Youtube](https://youtu.be/WxMFZncm12s?list=PLg7s6cbtAD15G8lNyoaYDuKZSKyJrgwB-)
- [Simple Guide](http://rogerdudler.github.io/git-guide/)

### The Basics
*Initialize the Repository*
>git init
>git init [directory name] 
_if the directory doesn't already exist_

*Commit Changes*
_this is typically thought of as the staging command, the staged files are then added with
the add command along with comments. As you get more experienced with git the commits
will become more cohesive and planned (such that they make sense as a group and help
make the history clear and cohesive)._

>git status
>git add -A
>git commit -m [comment]

*Difference between current and committed files*
_A useful way to see how content has changed. This is also useful to examine the staging 
area. i.e. How files differ from your local copy, staging area and committed copy._
>git diff
>git diff --staged
>git diff HEAD

it is helpful to point out that files without a previous commit (i.e. new files) will 
show up with 'git status' but not 'git diff'. This is because 'git diff' tracks differences
between commits. Once the file is staged via 'git add -A', or a similar add command, the 
differences can be seen with 'git diff --staged'. Once the file has been staged git diff
will show changes in the file.  

In short git diff is the difference between a file saved and a file staged; git diff --staged
is the difference between a staged file and the last committed file. This kind of shows 
how git stages files and the flow into the stage and capture process.  

To compare all changes the git diff HEAD command will show the difference between the 
local copy and the last committed copy, effectively skipping over what has been staged
and not staged.

>git diff --color-words
>git diff --word-diff

both of these make reading the changes targeted, rather than printing the entire line
that has changed.  

to suppress more of the output and only show the number of files changed use git diff --stat

>git diff --stat

*Viewing the History of Commits with Log*
>git log
_this shows all the commits that have occurred within the repo, since this will often be 
too much information we can filter the log with some option flags. These flags show a condensed
view of the output and what files were involved in the commit respectively._
>git log --oneline
>git log --stat

>git log --patch

_this will show what content changed between commits, i.e. the diff between subsequent commits. 
Keep in mind these flags are not exclusive e.g._
>git log --stat --online

if we want to view a lot of log information we could try the following graph... log is
powerful and can be combined in many different ways, these are all basic examples.

>git log --graph --all --decorate --oneline

*Deleting Files*
>git rm [filename]

_note if the file has already been deleted 'git rm [filename]' will stage the deletion 
commit which is then tracked in git. This is inconvenient for a large number of files,
in which case we could use the following to update delete commits in a batch. Note that the
"." is calling out the current directory_

>git add -u .

you can also keep git from tracking files by using the command below, this removes it from
git but keeps the file in the local directory

>git rm --cached [filename]

_note that deletions with the GUI is very simple... no explanation needed_

*Moving Files*
_this is something version control has always struggled with... renaming and moving are the
same thing_

>git mv [filename] [new path/filename]

_this can also be accomplished by chaining together a rm and an add command. Alternatively
this could be done with a simple add -A command_

>git add -A

_if we want to track commit history across a move we will need the following... note that
the regular log will not track changes across a move_

>git log -M --follow

_git follows files by applying a similarity index, set at 50% by default, this can be 
reset but it doesn't need to be changed - typically_

*Ignore*
> touch .gitignore
> git add .gitignore
> git commit -m "preparing to ignore files"

_to ignore files we simply add them to the .gitignore file e.g. by opening .gitignore
with vim and adding the file name, for example: .DS_Store  
we can use wildcards like *.txt to ignore types of files or to designate directories
use an ending slash tmp/_
 
_it is also helpful to keep in mind that ignore applies to sub directories, although
ignore files in sub directories take precedence over the parent ignore specifications.
The ignore file can also be commented after using a #.  The ! can also be used to designate
files that cannot be ignored._

>git ls-files --others --ignored --exclude-standard
_this prints a list of files that github is ignoring (could we also just use the cat .gitignore)?_

*Branches*
_Master Branch is essentially Production. We should branch off of this for development
to create or delete a branch we can use either of the following_

> git branch [branch name]
> git branch -d [branch name]

*Checkout*
_Checkout is used to change branches, we can see which branch we are on by running either._ 

>git branch
>git status

_I've heard that branches can be thought of as "Save As" or "Virtual Directories", Checkout
allows you to move between these virtual directories. Your internal dialogue could almost be
"change to directory [name]" then implemented as git checkout [name]_  

_checkout also lets you see what your files look like at any spesific commit. to do this run
the following (just be sure to check back out when your finished with detached HEAD state)_

>git checkout [commit reference]

_to throw away changes - i.e. write the files contents from the last commit_

>git checkout -- [filename]

_we can also checkout a new branch and move to it in a single command_

>git checkout -b [branch name]

*Merge*
_go the branch you want to merge to, then type the command below. This will bring in the entire
commit history_

> git checkout [branch to merge into]
> git merge [path/file]

_note that if you want to abandon a merge because you cannot deconflict it on the spot
you can always abort the merge, which cleans up your status, with the following_

>git merge --abort

If you dont want to bring the entire commit history over in the merge you can use

>git merge --squash [target branch]

Once you've completed a merge you don't need the branch labeler name anymore, 
this will bring the the commit history over 

>git branch -d

*Network*
_when working in a local repository we need to specify where we will be sending our work,
this is done with the following_

>git remote add [name of destination] [location of destination e.g. url]
>git remote add origin http://github.com/Faraday1221/new_repo

_we can change the url as follows_

>git remote set-url [name of destination] [location of new destination]

_to delete a remote or to see a feed of all remotes try these:_
>git remote rm [name]
>git remote -v

*Fetch, Push and Pull*
_we can grab our files from a repository or branch with fetch (I think the branch -r command
is used to read in those files into the appropriate branches on the local repo)_

>git fetch origin
>git branch -r

_pull is very similar to fetch, a pull will grab files in the repo and merge them 
(as far as I can tell the only difference is that pull is a fetch with a merge)_

>git pull origin

_to send information back to github.com we use the push operation_

>git push origin